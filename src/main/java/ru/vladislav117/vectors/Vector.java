package ru.vladislav117.vectors;

/**
 * Абстрактный вектор.
 * Экземпляры реализаций этого интерфейса должны иметь конкретную длину и значения по осям.
 */
public interface Vector extends Cloneable {
    /**
     * Создание копии вектора.
     *
     * @return Копия этого вектора.
     */
    Vector clone();

    /**
     * Получение размера вектора.
     *
     * @return Размер вектора.
     */
    int getSize();

    /**
     * Проверка, существует ли значение по индексу.
     *
     * @param index Индекс значения вектора
     * @return Существует ли значение по индексу.
     */
    boolean containsIndex(int index);

    /**
     * Получение значения вектора по индексу.
     *
     * @param index Индекс значения вектора
     * @return Значение вектора.
     */
    double getIndex(int index);

    /**
     * Получение значения вектора по индексу.
     * Если у вектора нет значения по указанному индексу, будет возвращён 0.
     *
     * @param index Индекс значения вектора
     * @return Значение вектора.
     */
    double getIndexOrZero(int index);

    /**
     * Установка значения вектора по индексу.
     *
     * @param index Индекс значения вектора
     * @param value Значение
     * @return Этот же вектор.
     */
    Vector setIndex(int index, double value);

    /**
     * Прибавление к значению вектора по индексу.
     *
     * @param index   Индекс значения вектора
     * @param summand Слагаемое
     * @return Этот же вектор.
     */
    Vector addIndex(int index, double summand);

    /**
     * Вычитание из значения вектора по индексу.
     *
     * @param index      Индекс значения вектора
     * @param subtrahend Вычитаемое
     * @return Этот же вектор.
     */
    Vector subtractIndex(int index, double subtrahend);

    /**
     * Умножение значения вектора по индексу.
     *
     * @param index      Индекс значения вектора
     * @param multiplier Множитель
     * @return Этот же вектор.
     */
    Vector multipleIndex(int index, double multiplier);

    /**
     * Деление значения вектора по индексу.
     *
     * @param index   Индекс значения вектора
     * @param divisor Делитель
     * @return Этот же вектор.
     */
    Vector divideIndex(int index, double divisor);

    /**
     * Установка значений вектора в значения другого вектора.
     * Если у векторов совпадают не все индексы значений, то такие индексы будут проигнорированы.
     *
     * @param vector Вектор, значения которого будут присвоены
     * @return Этот же вектор.
     */
    Vector set(Vector vector);

    /**
     * Прибавление к значениям вектора значений другого вектора.
     * Если у векторов совпадают не все индексы значений, то такие индексы будут проигнорированы.
     *
     * @param summand Вектор, значения которого будут взяты как слагаемые
     * @return Этот же вектор.
     */
    Vector add(Vector summand);

    /**
     * Вычитание из значений вектора значений другого вектора.
     * Если у векторов совпадают не все индексы значений, то такие индексы будут проигнорированы.
     *
     * @param subtrahend Вектор, значения которого будут взяты как вычитаемые
     * @return Этот же вектор.
     */
    Vector subtract(Vector subtrahend);

    /**
     * Умножение всех значений вектора.
     *
     * @param multiplier Множитель
     * @return Этот же вектор.
     */
    Vector multiple(double multiplier);

    /**
     * Деление всех значений вектора.
     *
     * @param divisor Делитель
     * @return Этот же вектор.
     */
    Vector divide(double divisor);

    /**
     * Вычисление длины вектора.
     *
     * @return Длина вектора.
     */
    double length();

    /**
     * Вычисление расстояния до другого вектора.
     * Если у векторов совпадают не все индексы значений, то значения по таким индексам будут взяты за 0.
     *
     * @param vector Вектор, расстояние до которого будет вычислено
     * @return Расстояние до вектора.
     */
    double distance(Vector vector);

    /**
     * Приведение вектора к нормальной форме. Изменяется этот же вектор.
     *
     * @return Этот же вектор.
     */
    Vector normalize();

    /**
     * Приведение копии вектора к нормальной форме. Этот вектор не изменяется.
     *
     * @return Копия этого вектора в нормальной форме.
     */
    Vector toNormalized();

    /**
     * Вычисление вектора до целевого вектора.
     * Представляет собой следующий алгоритм: из целевого вектора вычитается текущий.
     * Если у векторов совпадают не все индексы значений, то значения по таким индексам будут взяты за 0.
     *
     * @param vector Целевой вектор
     * @return Вектор до целевого вектора.
     */
    Vector vectorTo(Vector vector);

    /**
     * Вычисление направления до вектора.
     * Представляет собой следующий алгоритм: из целевого вектора вычитается текущий, затем результат нормализуется.
     * Если у векторов совпадают не все индексы значений, то значения по таким индексам будут взяты за 0.
     *
     * @param vector Целевой вектор
     * @return Направление до целевого вектора.
     */
    Vector directionTo(Vector vector);
}
